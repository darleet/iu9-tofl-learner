[tool.poetry]
name = "learner"
version = "0.1.0"
description = ""
authors = ["darleet <darleet@mail.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.9.2"
requests = "^2.32.3"
python-dotenv = "^1.0.1"
prettytable = "^3.14.0"


[tool.poetry.group.dev.dependencies]
mypy = "<=1.11.2"
ruff = "^0.7.3"
black = "^24.10.0"
isort = "^5.13.2"
types-requests = "^2.32.0.20241016"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
extend-exclude = 'env|.env|venv|.venv'

[tool.isort]
profile = "black"
multi_line_output = 3
skip_glob = ["*/*/migrations"]

[tool.mypy]
disallow_untyped_defs = true
exclude = [
    ".*/migrations/.*",
]

[[tool.mypy.overrides]]
module = '*.*'
ignore_missing_imports = true
check_untyped_defs = true
disable_error_code = "ignore-without-code"

[tool.ruff]
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "I001", # isort
    "N",  #  pep8-naming
    "W292",  # no newline at end of file
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "E731",  # do not assign a lambda expression, use a def
    "B008",  # do not perform function calls in argument defaults
    "B009",  # Do not call `getattr` with a constant attribute value
    "B010",  # Do not call `setattr` with a constant attribute value
    "C401",  # Unnecessary generator (rewrite as a `set` comprehension)
    "C408",  # unnecessary `dict` call
    "C901",  # too complex
    "N802",  # function name should be lowercase
]
fix = true
lint.unfixable = ["E731", "F401"]

extend-exclude = [
    "*/migrations/*",
]
